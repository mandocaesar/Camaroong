/*
    angularGrid.js v 0.2.0
    Author: Sudhanshu Yadav
    Copyright (c) 2015 Sudhanshu Yadav - ignitersworld.com , released under the MIT license.
    Demo on: http://ignitersworld.com/lab/angulargrid/demo1.html
    Documentation and download on https://github.com/s-yadav/angulargrid 
*/

; !function (t, n) { "use strict"; function i(t) { return t.complete && ("undefined" == typeof t.naturalWidth || 0 !== t.naturalWidth) } function a(t) { return Array.prototype.slice.call(t) } var e = { gridWidth: 300, gutterSize: 10, refreshOnImgLoad: !0 }, r = function () { var i = t.element(n); return function (t) { return i[0] = t, i } }(); t.element(document.head).append("<style>.ag-no-transition{-webkit-transition: none !important;transition: none !important; visibility:hidden; opacity:0;}</style>"), t.module("angularGrid", []).directive("angularGrid", ["$timeout", "$window", "$q", "angularGridInstance", function (n, o, d, l) { return { restrict: "A", link: function (s, u, g) { function h() { var t = z.offsetWidth; C = Math.floor(t / (x.gridWidth + x.gutterSize)); var n = t % (x.gridWidth + x.gutterSize) + x.gutterSize; w = x.gridWidth + Math.floor(n / C), v.css({ width: w + "px", height: "auto" }), I.length = 0; for (var i = 0; C > i; i++) I.push(0); return w } function c() { var n, i, e = h(); a(v.find("img")).forEach(function (n) { var i = t.element(n); if (i.hasClass("img-loaded")) return void i.css("height", ""); var a, e = i.attr("actual-width") || i.attr("data-actual-width"), r = i.attr("actual-height") || i.attr("data-actual-height"); e && r && (a = n.width, g = r * a / e, i.css("height", g + "px")) }); var o, d, l, s = []; for (n = 0, i = v.length; i > n; n++) o = v[n], d = r(o), l = d.clone(), l.addClass("ag-no-transition"), l.css("width", e + "px"), d.after(l), s.push(l[0].offsetHeight), l.remove(); for (n = 0, i = v.length; i > n; n++) { o = r(v[n]); var g = s[n], c = Math.min.apply(Math, I), f = I.indexOf(c); I[f] = c + g + x.gutterSize; var m = f * (e + x.gutterSize); o.css({ top: c + "px", left: m + "px" }) } u.css("height", Math.max.apply(Math, I) + "px") } function f() { var e = !1; a(v).forEach(function (r) { var o = t.element(r), l = o.find("img"), s = []; l.length && (o.addClass("img-loading"), a(l).forEach(function (a) { var r = t.element(a); i(a) ? r.addClass("img-loaded") : s.push(d(function (t, i) { r.addClass("img-loading"), a.onload = function () { !e && x.refreshOnImgLoad && (e = !0, n(function () { c(), e = !1 }, 100)), r.removeClass("img-loading").addClass("img-loaded"), t() }, a.onerror = i })) }), s.length ? d.all(s).then(function () { o.removeClass("img-loading").addClass("img-loaded") }, function () { o.removeClass("img-loading").addClass("img-loaded") }) : o.removeClass("img-loading").addClass("img-loaded")) }) } function m() { var t = a(v).filter(function (t) { return r(t).hasClass("ng-leave") }); return d(function (i) { t.length ? r(t[0]).one("webkitTransitionEnd transitionend msTransitionEnd oTransitionEnd", function () { n(function () { v = u.children(), i() }) }) : i() }) } var v, p, C, w, z = u[0], W = t.element(o), y = g.angularGridId, S = g.angularGrid, I = [], x = { gridWidth: g.gridWidth ? parseInt(g.gridWidth) : e.gridWidth, gutterSize: g.gutterSize ? parseInt(g.gutterSize) : e.gutterSize, refreshOnImgLoad: "false" == g.refreshOnImgLoad ? !1 : !0 }; s.$watch(S, function () { n(function () { v = u.children(), m().then(function () { f(), n(function () { u.addClass("angular-grid"), c() }) }) }) }, !0), W.on("resize", function () { p && n.cancel(p), p = n(function () { c() }, 100) }), y && (l[y] = { refresh: c }) } } }]).factory("angularGridInstance", function () { var t = {}; return t }) }(angular, window);